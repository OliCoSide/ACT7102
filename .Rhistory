exp.s <- exp(ls * (ft - 1))
uu <- Re(fft(exp.s, inverse = T)) / (length(exp.s))
round(uu, 8)[1:100]
}
# sum(coef.vs(0.025))
## Fonction de répartition de S
F.S <- function(x, alpha_0, weight = NULL) {
pk <- coef.vs(alpha_0)
if(!is.null(weight)){
pk <- weight_S(vect.lambda[1], vect.lambda[2], alpha0 = alpha_0)
}
sum(pk[-1] * pgamma(x, 1:(length(pk) - 1), beta)) + pk[1]
}
VaR.S <- function(alpha_0, kappa, weight = NULL) {
fm <- coef.vs(alpha_0)
if (fm[1] > kappa) return(0)
optimise(function(x) abs(F.S(x, alpha_0, weight = weight) - kappa), c(0, 1000))$minimum
}
thau_vec(alpha_0 = 0)
VaR.S(0, 0.995)
VaR.S(0, 0.995, weight = 1)
VaR.S(0.05, 0.995)
VaR.S(0.05, 0.995, weight = 1)
VaR.S(0.09, 0.995)
VaR.S(0.09, 0.995, weight = 1)
seq.alpha_0 <- seq(0, 0.1, by = 0.01)
seq.kappa <- c(seq(0, 0.85, by = 0.05), 0.95, 0.99, 0.995, 0.999)
data.var.S <- sapply(seq.alpha_0, function(al) {
sapply(seq.kappa, function(ka) VaR.S(al, ka))
})
names(seq.alpha_0) <- sapply(seq.alpha_0, function(p) paste0("alpha_", p))
names(seq.kappa) <- sapply(seq.kappa, function(p) paste0("kappa_", p))
colnames(data.var.S) <- names(seq.alpha_0)
rownames(data.var.S) <- names(seq.kappa)
data.var.S2 <- as.data.frame(data.var.S)
data.var.S2$kappa <- seq.kappa
data.var.S2_long <- reshape2::melt(data.var.S2, id.vars = "kappa")
data.var.S2_long$alpha <- as.numeric(str_replace(data.var.S2_long$variable, "alpha_", ""))
col4 <- hcl.colors(8, "Batlow")
ggsave("graph2_Var.S.png",
data.var.S2_long %>%
ggplot(aes(x = kappa,
color = alpha,
group = factor(alpha))) +
geom_line(aes(y = value), lwd = 2, alpha = 0.8) +
scale_colour_gradient(name = TeX("Valeur de $\\alpha_0$"),
low = tail(col4, 1),
high = col4[1],
trans = "exp") +
theme_bw() +
labs(x = TeX("kappa"),
y = TeX("$VaR_{\\kappa}(S)$"),
title = TeX("$VaR_{\\kappa}(S)$ selon la valeur de $\\alpha_0$"),
subtitle = TeX("n = 10, $\\lambda_i = 0.1 * (i < 6) + 0.2 * (i > 5)$, $\\beta = 0.1$")) +
scale_y_continuous(labels = scales::dollar) +
scale_x_continuous(labels = scales::dollar)
)
## TVaR de S
TVaR.S <- function(alpha_0, kappa) {
fm <- coef.vs(alpha_0)
vv <- VaR.S(alpha_0, kappa)
pgamma.bar <- function(k) 1 - pgamma(vv, k + 1, beta)
k.sum <- sapply(1:(length(fm) - 1), function(k) {
fm[k + 1] * k * pgamma.bar(k) / beta
})
sum(k.sum) / (1 - kappa)
}
## TVaR de S
TVaR.S <- function(alpha_0, kappa) {
fm <- coef.vs(alpha_0)
vv <- VaR.S(alpha_0, kappa)
pgamma.bar <- function(k) 1 - pgamma(vv, k + 1, beta)
k.sum <- sapply(1:(length(fm) - 1), function(k) {
fm[k + 1] * k * pgamma.bar(k) / beta
})
sum(k.sum) / (1 - kappa)
}
TVaR.S(0, 0.995)
TVaR.S(0.05, 0.995)
TVaR.S(0.09, 0.995)
## densité de J_(i)
dens.J.i <- function(i, alpha_0, x) {
lam.i <- kl_table2$lambda_l[i]
alph <- lam.i - alpha_0
dpois(x, alph)
}
## PAr Oli
TVaR_kap_Xi_S <- function(kap, i, alpha0, maxval_k = 3,
maxval_gen = 2^8){
VaR <- VaR.S(alpha0, kappa = kap)
terms <- sapply(0:maxval_k, function(ki){ ## sum ki = 0,  ... infty
zet_i_ki <- zeta(k = 3, ## dummy value when full_vec = TRUE
i = i, maxval = maxval_gen,
convol = ki, full_vec = TRUE)
sum(sapply(0:maxval_k, function(ni){ ## sum n-i = 0 , ... infty
sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha_0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
to_print <- (maxval_k*ki + ni)/((maxval_k + 1)^2)
print(paste0("progression...", scales::percent(to_print, 0.1)))
return(value)
}))
})
return(
1/(1 - kap) * sum(terms)
)
}
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0)
## PAr Oli
TVaR_kap_Xi_S <- function(kap, i, alpha0, maxval_k = 3,
maxval_gen = 2^8){
VaR <- VaR.S(alpha0, kappa = kap)
terms <- sapply(0:maxval_k, function(ki){ ## sum ki = 0,  ... infty
zet_i_ki <- zeta(k = 3, ## dummy value when full_vec = TRUE
i = i, maxval = maxval_gen,
convol = ki, full_vec = TRUE)
sum(sapply(0:maxval_k, function(ni){ ## sum n-i = 0 , ... infty
sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
to_print <- (maxval_k*ki + ni)/((maxval_k + 1)^2)
print(paste0("progression...", scales::percent(to_print, 0.1)))
return(value)
}))
})
return(
1/(1 - kap) * sum(terms)
)
}
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0)
## PAr Oli
TVaR_kap_Xi_S <- function(kap, i, alpha0, maxval_k = 3,
maxval_gen = 2^8){
VaR <- VaR.S(alpha0, kappa = kap)
terms <- sapply(0:maxval_k, function(ki){ ## sum ki = 0,  ... infty
zet_i_ki <- zeta(k = 3, ## dummy value when full_vec = TRUE
i = i, maxval = maxval_gen,
convol = ki, full_vec = TRUE)
sum(sapply(0:maxval_k, function(ni){ ## sum n-i = 0 , ... infty
value <- sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
to_print <- (maxval_k*ki + ni)/((maxval_k + 1)^2)
print(paste0("progression...", scales::percent(to_print, 0.1)))
return(value)
}))
})
return(
1/(1 - kap) * sum(terms)
)
}
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0)
sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
ki <- 2
ni <- 2
k <- 2
sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
maxval_gen = 2^8
maxval_k = 3
alpha0 = 0
i <- 1
kap = 0.995
sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
zet_i_ki <- zeta(k = 3, ## dummy value when full_vec = TRUE
i = i, maxval = maxval_gen,
convol = ki, full_vec = TRUE)
sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
VaR <- VaR.S(alpha0, kappa = kap)
sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
## PAr Oli
TVaR_kap_Xi_S <- function(kap, i, alpha0, maxval_k = 3,
maxval_gen = 2^8){
VaR <- VaR.S(alpha0, kappa = kap)
terms <- sapply(0:maxval_k, function(ki){ ## sum ki = 0,  ... infty
zet_i_ki <- zeta(k = 3, ## dummy value when full_vec = TRUE
i = i, maxval = maxval_gen,
convol = ki, full_vec = TRUE)
sum(sapply(0:maxval_k, function(ni){ ## sum n-i = 0 , ... infty
value <- sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
to_print <- (maxval_k*ki + ni)/((maxval_k + 1)^2)
print(paste0("progression...", scales::percent(to_print, 0.1)))
return(value)
}))
})
return(
1/(1 - kap) * sum(terms)
)
}
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0)
sum(sapply(0:maxval_k, function(ni){ ## sum n-i = 0 , ... infty
value <- sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
to_print <- (maxval_k*ki + ni)/((maxval_k + 1)^2)
print(paste0("progression...", scales::percent(to_print, 0.1)))
return(value)
}))
to_print <- (maxval_k*ki + ni)/((maxval_k + 1)^2)
print(paste0("progression...", scales::percent(to_print, 0.1)))
(0:maxval_k, function(ni){ ## sum n-i = 0 , ... infty
value <- sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
to_print <- (maxval_k*ki + ni)/((maxval_k + 1)^2)
print(paste0("progression...", scales::percent(to_print, 0.1)))
return(value)
})
sapply(0:maxval_k, function(ni){ ## sum n-i = 0 , ... infty
value <- sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
})
to_print <- (maxval_k*ki + ni)/((maxval_k + 1)^2)
print(paste0("progression...", scales::percent(to_print, 0.1)))
return(value)
})
## PAr Oli
TVaR_kap_Xi_S <- function(kap, i, alpha0, maxval_k = 3,
maxval_gen = 2^8){
VaR <- VaR.S(alpha0, kappa = kap)
terms <- sapply(0:maxval_k, function(ki){ ## sum ki = 0,  ... infty
zet_i_ki <- zeta(k = 3, ## dummy value when full_vec = TRUE
i = i, maxval = maxval_gen,
convol = ki, full_vec = TRUE)
sum(sapply(0:maxval_k, function(ni){ ## sum n-i = 0 , ... infty
value <- sum(sapply(0:min(ki, ni), function(j){ ## sum j = 0... min(ki, ni)
## on calcule nos poids pour les deux autres boucles (ne dépendent pas de k ni de l)
v <- v_k_fun(m = maxval_gen, convol = j, remove_i = i)
tau <- thau_vec(alpha0, kl_table2,
maxval = maxval_gen,
convol = ni - j,
remove_i = i)
convol_v_tau <- Re(fft(fft(v)*fft(tau),inverse = TRUE))/maxval_gen
## densité des poissons
dpois(ki - j, kl_table2$lambda_l[i] - alpha0) *
dpois(ni - j, lambda.s(alpha0, remove_i = i)) *
dpois(j, alpha0) *
sum(sapply(1:(maxval_gen - 1), function(k){ # sum k = 1 ... infty
sum(sapply(1:k, function(l){
return(
zet_i_ki[l + 1] * convol_v_tau[k - l + 1] * l/beta *
pgamma(VaR,
k + 1, beta,
lower.tail = FALSE))
}))
}))
}))
to_print <- (maxval_k*ki + ni)/((maxval_k + 1)^2)
print(paste0("progression...", scales::percent(to_print, 0.1)))
return(value)
}))
})
return(
1/(1 - kap) * sum(terms)
)
}
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0)
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0, maxval_k = 6)
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0, maxval_k = 8)
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0, maxval_k = 10)
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0.05, maxval_k = 10)
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0, maxval_k = 25)
TVaR_kap_Xi_S(kap = 0.995, i = 1, alpha0 = 0.05, maxval_k = 25)
outer(alpha_to_try, i_to_try, function(x, y)
x + y)
alpha_to_try <- c(0, 0.05, 0.09)
i_to_try <- c(1, 6)
outer(alpha_to_try, i_to_try, function(x, y)
x + y)
alpha_to_try * 20
alpha_to_try * 200
alpha_to_try * 300
alpha_to_try * 400
